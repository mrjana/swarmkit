syntax = "proto3";

package api;

// NOTE(stevvooe): Make sure your gopath is appropriately set for this to work
// correctly.
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/docker/swarm-v2/cmd/protoc-gen-gogoswarm/plugin/dataaccess.proto";

// Meta is common to all API objects types.
message Meta {
	// TODO(stevvooe): Consider an ID here. Probably not.

	string name = 1;
	map<string, string> labels = 2;
}

message Node {
	option (dataaccess.model) = true;

	Meta meta = 1;
	string id = 2 [(gogoproto.customname) = "ID", (dataaccess.primarykey) = true];
	string ip = 3 [(gogoproto.customname) = "IP"];

	NodeStatus status = 4;

	// TODO(stevvooe): Define resources for the node (ie cpu, memory, local
	// volumes, etc.).
}

enum NodeStatus {
	UNKNOWN = 0;
	DOWN = 1;
	READY = 2;
	DRAINED = 3; // needs differentation of desired and observed state.
}

// TODO(stevvooe): Add QueryOptions types with pagination parameters. Needs to
// be common to every request type. Define common service primitives in
// services.proto. Each service should have single proto file.

message ImageSpec {
	// reference is a docker image reference. This can include a rpository, tag
	// or be fully qualified witha digest. The format is specified in the
	// distribution/reference package.
	string reference = 1; // TODO(stevvooe): Field type should be reference.Field.

	// TODO(stevvooe): Resolved must be moved.

	// Resolved is the image resolved by the swarm cluster. This may be
	// identical, depending on the name provided in meta. For example, the name
	// field may be "redis", whereas this field would specify the exact hash,
	// "redis@sha256:...".
	//
	// A user may set this field to bypass swarms resolution.
	string resolved = 2; // TODO(stevvooe): Field type should be reference.Field.
}

// Spec defines the properties of a Job. As tasks are created, they gain the
// Job specification.
//
// There are two key components to a spec. The first is a "source". A source
// defines runnable content. For the swarm use case, this is a container but we
// may extend it to provide other kinds of runnable targets. The second
// component is the "orchestration". The orchestration defines the strategy
// used to the schedule and run the target with a cluster.
message JobSpec {
	Meta meta = 1;

	message Source { // TODO(stevvooe): better name?
		oneof source {
			ImageSpec image = 1;
		}
	}

	message ServiceJob {
		int64 instances = 1;
	}

	message BatchJob {
		int64 completions = 1;
		int64 paralellism = 2;
	}

	message GlobalJob {
	}

	message CronJob {
	}

	message Orchestration { // TODO(stevvooe): Consider calling this strategy.
		oneof job {
			ServiceJob service = 1;
			BatchJob batch = 2;
			GlobalJob global = 3;
			CronJob cron = 4;
		}
	}

	Source source = 2;
	Orchestration orchestration = 3;

	// NetworkAttachment describes a desired attachment to the named network or
	// a specific network_id.
	message NetworkAttachment {
		oneof reference {
			string name = 1;
			string network_id = 2 [(gogoproto.customname) = "NetworkID"];
		}
	}

	repeated NetworkAttachment networks = 4;

	// TODO(stevvooe): Specify the components that make up the container
	// configuration. This should have fields similar to container.Config.
}

message TaskStatus {
	enum State {
		NEW = 0;
		ASSIGNED = 1;
		PREPARING = 2;
		READY = 3;
		STARTING = 4;
		RUNNING = 5;
		SHUTDOWN = 6;
		COMPLETE = 7; // successful completion of task (not error code, just ran)
		FAILED = 8; // task execution failed with error
		REJECTED = 9; // task could not be executed here.
		FINALIZE = 10; // when task is deallocated from node, waiting on cleanup
		DEAD = 11; // completely finished, unallocated task.
	}

	State state = 2;
	string message = 3;
}

// Task specifies the parameters for implementing a Spec. A task is effectively
// immutable and idempotent. Once it is dispatched to a node, it will not be
// dispatched to another node.
message Task {
	option (dataaccess.model) = true;
	string id = 1 [(gogoproto.customname) = "ID", (dataaccess.primarykey) = true];
	Meta meta = 2;
	string job_id = 3 [(gogoproto.customname) = "JobID"];

	// TODO(stevvooe): Consider bringing back assignment, rather than using a
	// node id field. We like having this concept be first-class. It helps to
	// reason about storage and consistency.

	// if not set, the task is unassigned.
	string node_id = 4 [(gogoproto.customname) = "NodeID"];

	// NOTE(stevvooe): Spec, status or both may be set, depending on the role
	// of this message.

	JobSpec spec = 5;
	TaskStatus status = 6;

	// TODO(stevvooe/mrjana): Need to add additional fields about result of
	// network attach.
}

message Job {
	option (dataaccess.model) = true;

	string id = 1 [(gogoproto.customname) = "ID", (dataaccess.primarykey) = true];
	Meta meta = 2;
	JobSpec spec = 3;
}

// IPAMConfiguration specifies parameters for IP Address Management.
message IPAMConfiguration {
	// TODO(stevvooe): It may make more sense to manage IPAM and network
	// definitions separately. This will allow multiple networks to share IPAM
	// instances. For now, we will follow the conventions of libnetwork and
	// specify this as part of the network specification.

	// Subnet defines a network as a CIDR address (ie network and mask
	// 192.168.0.1/24).
	string subnet = 1;

	// Range defines the portion of the subnet to allocate to tasks. This is
	// defined as a subnet within the primary subnet.
	string range = 2;

	// Gateway address within the subnet.
	string gateway = 3;

	// Reserved is a list of address from the master pool that should *not* be
	// allocated. These addresses may have already been allocated or may be
	// reserved for another allocation manager.
	map<string, string> reserved = 4;
}


// Driver is a generic driver type to be used throughout the API. For now, a
// driver is simply a name and set of options. The field contents depend on the
// target use case and driver application. For example, a network driver may
// have different rules than a volume driver.
message Driver {
	string name = 1;
	map <string, string> options = 2;
}

// NetworkSpec specifies user defined network parameters.
message NetworkSpec {
	Meta meta = 1;

	message IPAMOptions {
		Driver driver = 1;
		repeated IPAMConfiguration ipv4 = 3;
		repeated IPAMConfiguration ipv6 = 4;
	}

	Driver driver = 2;

	// IPv6Enabled enables support for IPv6 on the network.
	bool ipv6_enabled = 3;

	// internal restricts external access to the network. This may be
	// accomplished by disabling the default gateway or through other means.
	bool internal = 4;

	IPAMOptions ipam = 5;
}

message Network {
	string id = 1 [(gogoproto.customname) = "ID"];
	NetworkSpec spec = 2;
}
